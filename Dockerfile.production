# Multi-stage Docker build for AdmuseEasy - Production Ready
# Stage 1: Build React client
FROM node:18-alpine AS client-build

# Set working directory
WORKDIR /app/client

# Copy package files and install dependencies
COPY client/package*.json ./
RUN npm ci --only=production --silent

# Copy client source and build
COPY client/ ./
RUN npm run build

# Stage 2: Setup server with built client
FROM node:18-alpine AS production

# Install system dependencies for security and functionality
RUN apk add --no-cache \
    wget \
    curl \
    dumb-init \
    && rm -rf /var/cache/apk/*

# Set working directory
WORKDIR /app

# Create non-root user for security
RUN addgroup -g 1001 -S nodejs && \
    adduser -S admuse -u 1001 -G nodejs

# Copy package files and install only production dependencies
COPY server/package*.json ./
RUN npm ci --only=production --silent && \
    npm cache clean --force

# Copy server source
COPY server/ ./

# Copy built client from previous stage
COPY --from=client-build /app/client/build ./client/build

# Create necessary directories and set permissions
RUN mkdir -p logs && \
    chown -R admuse:nodejs /app && \
    chmod -R 755 /app

# Switch to non-root user
USER admuse

# Expose port
EXPOSE 5000

# Health check using wget with better error handling
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
  CMD wget --no-verbose --tries=1 --spider http://localhost:5000/api/health || exit 1

# Add labels for better container management
LABEL maintainer="AdmuseEasy Team" \
      version="1.0" \
      description="AdmuseEasy AI Marketing Platform" \
      org.opencontainers.image.source="https://github.com/nuwnian/AdmuseEasy"

# Use dumb-init to handle signals properly
ENTRYPOINT ["dumb-init", "--"]

# Start application
CMD ["node", "index.js"]