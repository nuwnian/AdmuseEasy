name: Deploy to Azure Web App for Containers

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AZURE_WEBAPP_NAME: 'Admuse-Easy'
  CONTAINER_REGISTRY: 'admuseeasyregistry.azurecr.io'
  IMAGE_NAME: 'admuseasy'

jobs:
  test:
    runs-on: ubuntu-latest
    name: Quality Assurance Testing
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: |
          client/package-lock.json
          server/package-lock.json
    
    - name: Install client dependencies
      run: |
        cd client
        npm install
    
    - name: Install server dependencies
      run: |
        cd server
        npm install
    
    - name: Run API tests
      run: |
        cd server
        npm test
      env:
        NODE_ENV: test
        JWT_SECRET: test-secret
        MONGODB_URI: mongodb://localhost:27017/admuse-test
    
    - name: Build client for testing
      run: |
        cd client
        npm run build
    
    - name: Start server for E2E tests
      run: |
        cd server
        npm start &
        sleep 10  # Wait for server to start
      env:
        NODE_ENV: test
        PORT: 5000
    
    - name: Run Cypress E2E tests
      run: |
        cd client
        npx cypress run --headless
      env:
        CYPRESS_baseUrl: http://localhost:5000

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: test  # Only deploy if tests pass
    if: github.ref == 'refs/heads/main'  # Only deploy on main branch
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Azure Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.CONTAINER_REGISTRY }}
        username: ${{ secrets.AZURE_REGISTRY_USERNAME }}
        password: ${{ secrets.AZURE_REGISTRY_PASSWORD }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.CONTAINER_REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha
          type=raw,value=latest
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64
    
    - name: Deploy to Azure Web App for Containers
      uses: azure/webapps-deploy@v3
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE_CONTAINER }}
        images: ${{ env.CONTAINER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
    
    - name: Azure CLI - Restart Web App
      uses: azure/CLI@v1
      with:
        azcliversion: 2.53.0
        inlineScript: |
          az webapp restart --name ${{ env.AZURE_WEBAPP_NAME }} --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }}
    
    - name: Health Check
      run: |
        echo "Waiting for deployment to be ready..."
        sleep 60
        
        # Health check with retry
        for i in {1..10}; do
          if curl -f https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/api/health; then
            echo "‚úÖ Deployment successful! Health check passed."
            break
          else
            echo "‚è≥ Attempt $i: Health check failed, retrying in 30s..."
            sleep 30
          fi
        done
    
    - name: Notify Sentry of deployment
      run: |
        curl -X POST "https://sentry.io/api/0/organizations/${{ secrets.SENTRY_ORG }}/releases/" \
          -H "Authorization: Bearer ${{ secrets.SENTRY_AUTH_TOKEN }}" \
          -H "Content-Type: application/json" \
          -d '{
            "version": "${{ github.sha }}",
            "projects": ["${{ secrets.SENTRY_PROJECT }}"],
            "refs": [{
              "repository": "${{ github.repository }}",
              "commit": "${{ github.sha }}"
            }]
          }' || echo "Sentry notification failed (non-critical)"
        
        echo "üöÄ Container deployment completed successfully!"
        echo "üìä Monitor at: https://sentry.io"
        echo "üåê Live at: https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net"
        echo "üê≥ Container: ${{ env.CONTAINER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"